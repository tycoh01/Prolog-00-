% Some simple test Prolog programs
% --------------------------------

% Knowledge bases
    swap(list,list).
    swap([X,Y|List],[Y,X|List]) :- X > Y.
    swap([Z|List],[Z|List1]) :- swap(List,List1). %equal

    printlist(list). %problem
    printlist([]) :- nl.
    printlist([Head|List]) :-
        write(Head),
    	write(" "),%write has sandbox problem, weird. blueprint is 
        printlist(List).   

    bubblesort(list,list).
  	bubblesort(InputList,SortList) :-
        swap(InputList,List) , ! ,	%problem, too general, there is no relation between SortList and swap
%       printlist(List),	%function(   
        bubblesort(List,SortList).
    bubblesort(SortList,SortList). %OOsame as line 5  
/*
Primarily, you appear to be using SWISH as your interpreter of choice, which locks away a number of input/output methods (including tab/1, write/2,get_single_char/1, put/1, etc.), so you will be unable to use them. 
*/
 
bub1Sort([],[]) :- !. %stop condition
bub1Sort([H],[H]) :- !. %stop condition
bub1Sort(L,SL) :- append(L1, [H1,H2|L2], L), H2 < H1, append(L1, [H2,H1|L2], NL), !,
                 bub1Sort(NL,SL). %iteration condition::if H1< H2 then fail
bub1Sort(L,L). %weird::L[bubbleSort]L

%一、L1以及swap_three，他的goal導出NL`,
%NL滿足append與H2<H1
%，NL再pass到bubSort(NL,SL)
%他的Solution tree
%第一個goal在於分拆list
%第二個goal在於結合List
%變數計劃
%有procedure 也有recursive

test :- write("Hello World").
    
 
           
mergesort([],[]).    /* covers special case */
mergesort([A],[A]).
mergesort([A,B|R],S) :-  
   split([A,B|R],L1,L2),
   mergesort(L1,S1),
   mergesort(L2,S2),
   merge(S1,S2,S).

split([],[],[]).
split([A],[A],[]).
split([A,B|R],[A|Ra],[B|Rb]) :-  split(R,Ra,Rb).

merge(A,[],A).
merge([],B,B).
merge([A|Ra],[B|Rb],[A|M]) :-  A =< B, merge(Ra,[B|Rb],M).
merge([A|Ra],[B|Rb],[B|M]) :-  A > B,  merge([A|Ra],Rb,M).     

bubble_sort([A], [A]) :- !.
bubble_sort(U, [A|S]) :- sink(U, [A|P]), bubble_sort(P, S).
sink([A], [A]). %A is binding to [A]
sink([A|R], L) :- sink(R, [B|S]), (A =< B, !, L = [A,B|S]; L = [B,A|S]). % B is binding by [B|S]

%6 lines economical
insert_sort(List,Sorted):-i_sort(List,[],Sorted). %first sub-objective
i_sort([],Acc,Acc).
i_sort([H|T],Acc,Sorted):-insert(H,Acc,NAcc),i_sort(T,NAcc,Sorted).
   
insert(X,[Y|T],[Y|NT]):-X>Y,insert(X,T,NT).
insert(X,[Y|T],[X,Y|T]):-X=<Y.
insert(X,[],[X]).

list_member(A,[A|_]).
list_member(A,[_|B]):-list_member(A,B).


%DFD
